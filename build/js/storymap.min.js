"use strict";

/* global $, _, Utils*/

/**
*	Constructs a generic dialog object
*	@param {Object} options An object containing the following properties
*	@property {String} templateId The DOM node id of the panel containing the dialog template
*	@property {String} messageTextId The DOM node id of the dialog message text
*	@property {String} showCancelButton A boolean telling if the cancel button must be shown
*	@property {String} cancelButtonClass The DOM node class of the cancel button
*	@property {String} confirmButtonClass The DOM node class of the confirm button
*	@property {String} closeButtonClass The DOM node class of the close button
*/
function Dialog(options) {

	var _defaultOptions = {
		templateId: "#dialog_template",
		messageTextId: "#msg",
		showCancelButton: true,
		cancelButtonClass: ".btn-ko",
		confirmButtonClass: ".btn-ok",
		closeButtonClass: ".close"
	};

	this.options = $.extend(true, {}, _defaultOptions, options);

	this.setupDialog();
	this.addEvents();
}

/**
*	Setups the dialog
*	@access private
*/
Dialog.prototype.setupDialog = function () {

	var id = Utils.getRandomId();
	this.id = "#" + id;

	this.template = _.template($(this.options.templateId).html().trim());
	$("body").append(this.template({ id: id }));

	if (!this.options.showCancelButton) {

		$(this.id + " " + this.options.cancelButtonClass).hide();
	}
};

/**
*	Adds the events the Dialog should respond to
*	@access private
*	@emits "Dialog:accept" when the accept button is pressed
*	@emits "Dialog:cancel" when the cancel or close buttons are pressed
*/
Dialog.prototype.addEvents = function () {

	var self = this;

	$(self.id + " " + self.options.confirmButtonClass).on("click", function () {

		self.hide();
		$(self).trigger("Dialog:accept");
	});

	$(self.id + " " + self.options.closeButtonClass).on("click", function () {

		self.hide();
		$(self).trigger("Dialog:cancel");
	});

	$(self.id + " " + self.options.cancelButtonClass).on("click", function () {

		self.hide();
		$(self).trigger("Dialog:cancel");
	});
};

/**
*	Sets the message shown on the dialog panel
*	@param {String} msg The dialog message
*	@access public
*/
Dialog.prototype.setMessage = function (msg) {

	$(this.id + " " + this.options.messageTextId).html("<span>" + msg + "</span>");
};

/**
*	Shows the dialog panel
*	@access public
*/
Dialog.prototype.show = function () {

	$(this.id).show();
};

/**
*	Hides the diagonal panel
*	@access public
*/
Dialog.prototype.hide = function () {

	$(this.id).hide();
};
"use strict";

/* global Utils, $*/

/**
*	Constructs a InfoPanel object that represents the slide info panel
*	@param {Object} options An object containing the following properties
*	@property {String} panelId The DOM node id of the panel containing the info panel
*	@property {String} urlInputId The DOM node id of the input where the url is written to
*	@property {String} urlLoadButtonId The DOM node id of the load URL button
*	@property {String} urlClearButtonId The DOM node id of the clear URL button
*	@property {String} urlFormGroup The DOM node id of the url form group
*	@property {String} urlFeedback The DOM node id where the url input feedback is shown
*	@property {String} titleInputId The DOM node id of the slide title input
*	@property {String} titleFormGroup The DOM node id of the slide title form group
*	@property {String} titleFeedback The DOM node id where the title input feedback is shown
*	@property {String} resetSlideButtonId The DOM node id of the reset slide button
*	@property {String} textInputId The DOM node id of the description text area
*/
function InfoPanel(index, options) {

	var _defaultOptions = {

		panelId: "#dataSection",
		urlInputId: "#urlMap",
		urlLoadButtonId: "#storymap_load",
		urlClearButtonId: "#storymap_unload",
		urlFormGroup: "#urlFormGroup",
		urlFeedback: "#urlMapFeedback",
		titleInputId: "#title",
		titleFormGroup: "#titleFormGroup",
		titleFeedback: "#titleFeedback",
		resetSlideButtonId: "#storymap_reset_slide",
		textInputId: "#summernote"

	};

	this.options = $.extend(true, {}, _defaultOptions, options);
	this.isDirty = false;
	this.loadedData = {};

	this.addEvents();
	this.setupSummernote();

	this.reset();
}

/**
*	Adds the events the SettingsPanel should respond to
*	@access private
*/
InfoPanel.prototype.addEvents = function () {
	var _this = this;

	var self = this;

	$(self.options.urlLoadButtonId).on("click", function () {

		self.setURL();
	});

	$(self.options.urlClearButtonId).on("click", function () {

		$(self.options.urlInputId).val("");
		self.disableURLButtons(false);
		$(self).trigger("InfoPanel:clearURLPressed");
	});

	$(self.options.resetSlideButtonId).on("click", function () {

		self.reset();
		self.setDirty(true);
	});

	$(self.options.urlInputId).on("input", function () {

		self.checkURL();
	});

	$(self.options.titleInputId).on("input", function () {

		self.checkTitol();
	});

	$(self.options.textInputId).on("summernote.change", function () {

		self.checkText();
	});

	$(self.options.urlInputId).keyup(function (event) {

		var url = $(_this.options.urlInputId).val();

		if (event.keyCode === 13 && Utils.isValidURL(url)) {

			$(self.options.urlLoadButtonId).click();
		}
	});
};

/**
*	Setups the text area WYSIWYG editor
*	@access private
*/
InfoPanel.prototype.setupSummernote = function () {

	$(this.options.textInputId).summernote({
		disableDragAndDrop: true,
		dialogsInBody: true,
		toolbar: [["style", ["color"]], ["style", ["style"]], ["style", ["bold", "underline", "clear"]], ["style", ["fontname"]], ["para", ["ul", "ol", "paragraph"]], ["insert", ["table"]], ["insert", ["link", "picture", "video"]], ["misc", ["fullscreen", "codeview", "help"]]]
	});

	// Hide the "Upload picture" form 
	$(".note-group-select-from-files").hide();
};

/**
*	Checks if the url found in the URL input is a valid URL. If it's, the buttons are
*	enabled and the slide is set as dirty. If not, the buttons are disabled and the
*	slide inputs are disabled
*	@access private
*/
InfoPanel.prototype.checkURL = function () {

	var url = $(this.options.urlInputId).val();

	if (Utils.isValidURL(url)) {

		this.enableURLButtons();
		this.setDirty(true);
	} else {

		this.disableURLButtons();
	}
};

/**
*	Enables the url buttons
*	@access private
*/
InfoPanel.prototype.enableURLButtons = function () {

	$(this.options.urlFormGroup).removeClass("has-error");
	$(this.options.urlFeedback).hide();
	$(this.options.urlLoadButtonId).prop("disabled", false);
	$(this.options.urlClearButtonId).prop("disabled", false);
};

/**
*	Enables the slide inputs
*	@access private
*/
InfoPanel.prototype.enableSlideInputs = function () {

	$(this.options.titleFormGroup).removeClass("has-error");
	$(this.options.titleFeedback).hide();
	$(this.options.textInputId).summernote("enable");
	$(this.options.titleInputId).prop("disabled", false);
	$(this.options.resetSlideButtonId).prop("disabled", false);
};

/**
*	Disables the url buttons
*	@param {boolean} showFeedback A boolean telling if feedback should be shown or not
*	@access private
*/
InfoPanel.prototype.disableURLButtons = function (showFeedback) {

	var shouldShowFeedback = showFeedback || showFeedback === undefined;

	if (shouldShowFeedback) {

		$(this.options.urlFormGroup).addClass("has-error");
		$(this.options.urlFeedback).show();
	}

	$(this.options.urlLoadButtonId).prop("disabled", true);
	$(this.options.urlClearButtonId).prop("disabled", true);
};

/**
*	Disables the slide inputs
*	@param {boolean} showFeedback A boolean telling if feedback should be shown or not
*	@access private
*/
InfoPanel.prototype.disableSlideInputs = function (showFeedback) {

	var shouldShowFeedback = showFeedback || showFeedback === undefined;

	if (shouldShowFeedback) {

		$(this.options.titleFormGroup).addClass("has-error");
		$(this.options.titleFeedback).show();
	}

	$(this.options.textInputId).summernote("disable");
	$(this.options.resetSlideButtonId).prop("disabled", true);
	$(this.options.titleInputId).prop("disabled", true);
};

/**
*	Checks if the title input is good and if it is, sets the slide as dirty
*	@access private
*/
InfoPanel.prototype.checkTitol = function () {

	var text = $(this.options.titleInputId).val();

	if (Utils.isNotEmpty(text)) {

		this.setDirty(true);
	}
};

/**
*	Checks if the title input is good and if it is, sets the slide as dirty
*	@access private
*/
InfoPanel.prototype.checkText = function () {

	var text = $(this.options.textInputId).summernote("code");

	if (Utils.isNotEmpty(text)) {

		this.setDirty(true);
	}
};

/**
*	Sets the slide as dirty
*	@param {boolean} isDirty A boolean telling if the slide info is dirty or not
*	@access private
*/
InfoPanel.prototype.setDirty = function (isDirty) {

	this.isDirty = isDirty;
};

/**
*	Loads the slide url
*	@access private
*	@emits "InfoPanel:loadURL" when the url is loaded
*/
InfoPanel.prototype.setURL = function () {

	var self = this;

	var url = $(self.options.urlInputId).val();
	$(self).trigger("InfoPanel:loadURL", [url]);
};

/**
*	Gets the url input value
*	@access public
*/
InfoPanel.prototype.getURL = function () {

	return $(this.options.urlInputId).val();
};

/**
*	Gets the title input value
*	@access public
*/
InfoPanel.prototype.getTitol = function () {

	return $(this.options.titleInputId).val();
};

/**
*	Gets the description input value
*	@access public
*/
InfoPanel.prototype.getDescripcio = function () {

	return $(this.options.textInputId).summernote("code");
};

/**
*	Resets the info panel to the starting slide data
*	@access public
*	@emits "InfoPanel:loadURL" when the url is loaded
*	@emits "InfoPanel:clearURLPressed" when the clear url button is pressed
*/
InfoPanel.prototype.reset = function () {

	var title = this.loadedData.titol || "";
	var desc = this.loadedData.descripcio || "";
	var url = this.loadedData.url || "";

	$(this.options.titleInputId).val(title);
	$(this.options.textInputId).summernote("code", desc);
	$(this.options.titleFormGroup).removeClass("has-error");
	$(this.options.titleFeedback).hide();
	$(this.options.urlInputId).val(url);

	if (url.trim() !== "") {

		$(this).trigger("InfoPanel:loadURL", [url]);
		this.enableURLButtons();
	} else {

		$(this).trigger("InfoPanel:clearURLPressed");
		this.disableURLButtons();
	}
};

/**
*	Clears the info panel
*	@access public
*/
InfoPanel.prototype.clean = function () {

	var title = "";
	var desc = "";
	var url = "";

	$(this.options.titleInputId).val(title);
	$(this.options.textInputId).summernote("code", desc);
	$(this.options.titleFormGroup).removeClass("has-error");
	$(this.options.titleFeedback).hide();
	$(this.options.urlInputId).val(url);

	this.disableURLButtons();
};

/**
*	Sets the info panel information
*	param {String} url The url string
*	param {title} titol The title string
*	param {title} descripcio The description string
*	@access public
*	@emits "InfoPanel:loadURL" when the URL is loaded
*/
InfoPanel.prototype.setData = function (url, titol, descripcio) {

	this.loadedData = { url: url, titol: titol, descripcio: descripcio };

	if (url && url !== "") {

		this.enableURLButtons();
	} else {

		this.disableURLButtons();
	}

	$(this).trigger("InfoPanel:loadURL", [url]);
	$(this.options.urlInputId).val(url);
	$(this.options.titleInputId).val(titol);
	$(this.options.textInputId).summernote("code", descripcio);
};

/**
*	Shows the info panel
*	@access public
*/
InfoPanel.prototype.show = function () {

	$(this.options.panelId).show();
};

/**
*	Hides the info panel
*	@access public
*/
InfoPanel.prototype.hide = function () {

	$(this.options.panelId).hide();
};
"use strict";

/* global $*/

/**
*	Constructs a Loader object that represents the loader
*	@param {Object} options An object containing the following properties
*	@property {String} DOMId The DOM node id of the panel containing the loader panel
*	@property {String} titleClass The DOM node class of the loader panel
*/
function Loader(options) {

	var _defaultOptions = {
		DOMId: "#modal-loader",
		titleClass: ".loader-title"
	};

	this.options = $.extend(true, {}, _defaultOptions, options);
}

/**
*	Sets the title shown on the loader panel
*	@param {String} text The loader title panel
*	@access public
*/
Loader.prototype.setTitle = function (title) {

	$(this.options.DOMId + " " + this.options.titleClass).html(title);
};

/**
*	Shows the loader panel
*	@access public
*/
Loader.prototype.show = function () {

	$(this.options.DOMId).show();
};

/**
*	Hides the loader panel
*	@access public
*/
Loader.prototype.hide = function () {

	$(this.options.DOMId).hide();
};
"use strict";

/* global $*/

/**
*	Constructs a SettingsPanel object that represents the setting panel
*	@param {Object} options An object containing the following properties
*	@property {String} panelId The DOM node id of the panel containing the settings panel
*	@property {String} overlappedButtonId The DOM node id of the overlapped button
*	@property {String} noOverlappedButtonId The DOM node id of the non overlapped button
*	@property {String} animParametersPanelId The DOM node id of the animation parameters panel
*	@property {String} animCheckbox The DOM node id of the animation checkbox
*	@property {String} carouselTime The DOM node id where the seconds between slides is input
*	@property {String} pauseCheckbox The DOM node id of the pause on hover checkbox
*	@property {String} rideCheckbox The DOM node id of the should start on load checkbox
*	@property {String} afterFirstCheckbox The DOM node id of the should animate after first slide
*	 checkbox
*	@property {String} wrapCheckbox The DOM node id of the should loop checkbox
*/
function SettingsPanel(index, options) {

	var _defaultOptions = {

		panelId: "#settingsSection",
		overlappedButtonId: "#superposat",
		noOverlappedButtonId: "#noSuperposat",
		animParametersPanelId: "#animParams",
		animCheckbox: "#animCheckbox",
		carouselTime: "#carouselTime",
		pauseCheckbox: "#pauseCheckbox",
		rideCheckbox: "#rideCheckbox",
		afterFirstCheckbox: "#afterFirstCheckbox",
		wrapCheckbox: "#wrapCheckbox"

	};

	this.options = $.extend(true, {}, _defaultOptions, options);
	this.isOverlapped = false;
	this.isDirty = false;

	this.addEvents();
	this.reset();
}

/**
*	Adds the events the SettingsPanel should respond to
*	@access private
*/
SettingsPanel.prototype.addEvents = function () {

	var self = this;

	$(self.options.overlappedButtonId).on("click", function () {

		self.enableOverlappedMode(true);
	});

	$(self.options.noOverlappedButtonId).on("click", function () {

		self.enableOverlappedMode(false);
	});

	$(self.options.animCheckbox).on("change", function () {

		if ($(self.options.animCheckbox).is(":checked")) {

			self.enableAnimParameters(true);
		} else {

			self.enableAnimParameters(false);
		}
	});
};

/**
*	Sets the overlapping mode
*	@param {boolean} shouldEnable A boolean telling if the right bar should overlap the slide
*	@access private
*	@emits "Settings:overlappingChanged" when the overlapping mode has changed
*/
SettingsPanel.prototype.enableOverlappedMode = function (shouldEnable) {

	if (shouldEnable) {

		this.isOverlapped = true;
		$(this.options.overlappedButtonId).addClass("active");
		$(this.options.noOverlappedButtonId).removeClass("active");
	} else {

		this.isOverlapped = false;
		$(this.options.overlappedButtonId).removeClass("active");
		$(this.options.noOverlappedButtonId).addClass("active");
	}

	$(this).trigger("Settings:overlappingChanged", [this.isOverlapped]);
	this.isDirty = true;
};

/**
*	Reset the settings panel
*	@access public
*/
SettingsPanel.prototype.reset = function () {

	this.enableOverlappedMode(false);
	this.isDirty = false;
};

/**
*	Shows the settings panel
*	@access public
*/
SettingsPanel.prototype.show = function () {

	$(this.options.panelId).show();
};

/**
*	Hides the settings panel
*	@access public
*/
SettingsPanel.prototype.hide = function () {

	$(this.options.panelId).hide();
};

/**
*	Enables or disables the animation parameters
*	@param {boolean} shouldEnable A boolean telling if the animation parameters panel should
*	be visible or not
*	@access private
*/
SettingsPanel.prototype.enableAnimParameters = function (shouldEnable) {

	if (shouldEnable) {

		$(this.options.animParametersPanelId).addClass("showAnimParams").removeClass("hideAnimParams");
	} else {

		$(this.options.animParametersPanelId).removeClass("showAnimParams").addClass("hideAnimParams");
	}
};

/**
*	Gets the overlapping mode
*	@access public
*	@returns {String} The name of the overlapping mode ("overlapped" or "nonOverlapped")
*/
SettingsPanel.prototype.getOverlappingMode = function () {

	return $(this.options.overlappedButtonId).hasClass("active") ? "overlapped" : "noOverlapped";
};

/**
*	Gets the animated setting
*	@access public
*	@returns {boolean} A boolean telling if the StoryMap is animated or not
*/
SettingsPanel.prototype.isAnimated = function () {

	return $(this.options.animCheckbox).prop("checked");
};

/**
*	Gets the time between slides setting
*	@access public
*	@returns {Number} The number of seconds that the StoryMap waits before moving to the next slide
*/
SettingsPanel.prototype.getTimeBetweenSlides = function () {

	return $(this.options.carouselTime).val();
};

/**
*	Gets the should pause on hover setting
*	@access public
*	@returns {boolean} A boolean telling if the StoryMap should wait when the mouse is hovered on the
*	slide
*/
SettingsPanel.prototype.shouldPauseOnHover = function () {

	return $(this.options.pauseCheckbox).prop("checked");
};

/**
*	Gets the should start on load setting
*	@access public
*	@returns {boolean} A boolean telling if the StoryMap should start when its just loaded
*/
SettingsPanel.prototype.shouldStartOnLoad = function () {

	return $(this.options.rideCheckbox).prop("checked");
};

/**
*	Gets the should anim on first slide setting
*	@access public
*	@returns {boolean} A boolean telling if the StoryMap should animate after the first slide
*	has been viewed
*/
SettingsPanel.prototype.shouldAnimOnFirstSlide = function () {

	return $(this.options.afterFirstCheckbox).prop("checked");
};

/**
*	Gets the should loop setting
*	@access public
*	@returns {boolean} A boolean telling if the StoryMap should return to the first slide
*	after the last one is viewed
*/
SettingsPanel.prototype.shouldLoop = function () {

	return $(this.options.wrapCheckbox).prop("checked");
};

/**
*	Sets the overlapping mode
*	@access public
*	@param {boolean} shouldOverlap A boolean telling if the right bar should be overlapped
*	or not
*/
SettingsPanel.prototype.setOverlappingMode = function (shouldOverlap) {

	this.enableOverlappedMode(shouldOverlap === "overlapped");
};

/**
*	Sets the animated setting
*	@access public
*	@param {boolean} shouldAnimate A boolean telling if the StoryMap should be animated
*	or not
*/
SettingsPanel.prototype.setIsAnimated = function (shouldAnimate) {

	$(this.options.animCheckbox).prop("checked", shouldAnimate);
	this.enableAnimParameters(shouldAnimate);
};

/**
*	Sets the time between slides setting
*	@access public
*	@param {Number} time The number of seconds the StoryMap waits before moving to the next
*	slide
*/
SettingsPanel.prototype.setTimeBetweenSlides = function (time) {

	$(this.options.carouselTime).val(time);
};

/**
*	Sets the should pause on hover setting
*	@access public
*	@param {boolean} shouldPause A boolean telling if the StoryMap should be paused
*	when the mouse is hovering the slide or not
*/
SettingsPanel.prototype.setPauseOnHover = function (shouldPause) {

	$(this.options.pauseCheckbox).prop("checked", shouldPause);
};

/**
*	Sets the should start on load setting
*	@access public
*	@param {boolean} shouldStart A boolean telling if the StoryMap should start the
*	animation on load or not
*/
SettingsPanel.prototype.setStartOnLoad = function (shouldStart) {

	$(this.options.rideCheckbox).prop("checked", shouldStart);
};

/**
*	Sets the animate on first slide setting
*	@access public
*	@param {boolean} shouldStart A boolean telling if the StoryMap should start the animation
*	after the first slide is viewed or not
*/
SettingsPanel.prototype.setAnimOnFirstSlide = function (shouldAnimate) {

	$(this.options.afterFirstCheckbox).prop("checked", shouldAnimate);
};

/**
*	Sets the loop setting
*	@access public
*	@param {boolean} shouldStart A boolean telling if the StoryMap should loop when the last
*	slide is reached or not
*/
SettingsPanel.prototype.setLoop = function (shouldLoop) {

	$(this.options.wrapCheckbox).prop("checked", shouldLoop);
};
"use strict";

/* global $, SlideIcon*/

/**
*	Constructs a SlideBar object that represents the container where the icons will be placed and
*	where the add slide button and save story map button are located
*	@param {Object} options An object containing the following properties
*	@property {String} slidesContainerId The DOM node id of the container element
*	@property {String} slideListId The DOM node id of the slide list
*	@property {String} addSlideButton The DOM node id of the add slide button
*	@property {String} saveStorymapButton The DOM node id of the save story nao button
*/
function SlideBar(options) {

	var _defaultOptions = {
		slidesContainerId: "#slidesContainer",
		slideListId: "#slideList",
		addSlideButton: "#storymap_add_slide",
		saveStorymapButton: "#storymap_save"

	};

	this.options = $.extend(true, {}, _defaultOptions, options);

	this.sortableStart = 0;
	this.sortableEnd = 0;
	this.addEvents();
}

/**
*	Adds the events the SlideBar should respond to
*	@access private
*	@emits "SlideBar:addSlidePressed" when the add slide button is pressed
*	@emits "SlideBar:saveStorymapPressed" when the save story map button is pressed
*/
SlideBar.prototype.addEvents = function () {

	var self = this;

	$(self.options.addSlideButton).click(function () {

		$(self).trigger("SlideBar:addSlidePressed");
	});

	$(self.options.saveStorymapButton).click(function () {

		$(self).trigger("SlideBar:saveStorymapPressed");
	});

	$(self.options.slideListId).sortable({
		axis: "y",
		cursor: "move",
		items: ".slide",
		start: function start(event, ui) {

			var slideIndex = $(".slide").index(ui.item);
			self.sortableStart = slideIndex;
		},
		stop: function stop(event, ui) {

			self.sortableEnd = $(".slide").index(ui.item);

			if (self.sortableStart !== self.sortableEnd) {

				$(self).trigger("SlideBar:slideMoved", [self.sortableStart, self.sortableEnd]);

				self.updateSlideNums();
			}
		}
	});
};

/**
*	Adds an slide to the SlideBar
*	@param {boolean} click A boolean telling if the slide must be clicked after
*	being added. Useful when you want the just added slide to be selected
*	@access public
*	@emits "SlideBar:slideSelected" when the slide is selected
*	@emits "SlideBar:deleteSlidePressed" when the slide delete button is pressed
*/
SlideBar.prototype.addSlide = function (click) {

	var self = this;
	var shouldClick = click || click === undefined;

	var slide = new SlideIcon();
	slide.appendTo(this.options.slideListId);

	$(slide).on("Slide:deletePressed", function (event, id) {

		$(self).trigger("SlideBar:deleteSlidePressed", [id]);
	});

	$(slide).on("Slide:selected", function (event, id) {

		self.slideSelectedId = id;
		$(self).trigger("SlideBar:slideSelected", [id]);
	});

	$(this.options.slidesContainerId).scrollTop(Math.max(0, $(this.options.slideListId).height() - $(this.options.slideListId).parent().height()));

	if (shouldClick) {

		slide.clicked();
	}

	self.updateSlideNums();
};

/**
*	Adds an array of slides to the SlideBar
*	@param {Array} slides An array of slide objects with a titol property
*	@access public
*/
SlideBar.prototype.addSlides = function (slides) {

	for (var i = 0, len = slides.length; i < len; ++i) {

		this.addSlide(i === len - 1);
		var titol = slides[i].titol.trim() !== "" ? slides[i].titol : "(Sense títol)";
		$(this.options.slideListId + " li:nth-child(" + (i + 1) + ") .slide-title").html(titol);
	}
};

/**
*	Removes a slide from the SlideBar
*	@param {Number} num The position of the slide to be removed in the SlideBar
*	@access public
*/
SlideBar.prototype.removeSlide = function (num) {

	$(this.options.slideListId + " li:nth-child(" + (num + 1) + ")").remove();
	this.updateSlideNums();
};

/**
*	Sets the title of a slide on the SlideBar
*	@param {String} text The slide title
*	@access public
*/
SlideBar.prototype.setSlideTitle = function (text) {

	var title = text.trim() !== "" ? text : "(Sense títol)";
	$(this.options.slideListId + " li.selected .slide-title").html(title);
};

/**
*	Sets the title of a slide on the SlideBar
*	@param {String} text The slide title
*	@access public
*/
SlideBar.prototype.updateSlideNums = function () {

	$(this.options.slideListId + " .slide-num").each(function (index, elem) {

		$(elem).html(index + 1);
	});
};

/**
*	Removes all the SlideIcons from the SideBar
*	@access public
*/
SlideBar.prototype.clear = function () {

	$("" + this.options.slideListId).html("");
};
"use strict";

/* global $, _*/

/**
*	Constructs a SlideIcon object that represents a slide icon on the slide bar
*	@param {Object} options An object containing the following properties
*	@property {String} templateId The DOM node id of the template used when a slide is added
*	@property {String} slideClass The DOM node class of the slide icons
*/
function SlideIcon(options) {

	var _defaultOptions = {

		templateId: "#storymap_slide_template",
		slideClass: ".slide"

	};

	this.options = $.extend(true, {}, _defaultOptions, options);

	this.template = _.template($(this.options.templateId).html().trim());
	this.slideDOMElem = $(this.template(this.options));
	this.deleteDOMElem = $("<a class=\"close\" href=\"javascript:\">&nbsp;</a>");

	this.addEvents();
}

/**
*	Adds the events the SlideIcon should respond to
*	@access private
*/
SlideIcon.prototype.addEvents = function () {

	var self = this;

	self.slideDOMElem.click(function () {

		self.clicked();
	});

	self.deleteDOMElem.click(function () {

		self.deleteButtonPressed();
	});
};

/**
*	Triggers a slide selected event with its id as an event attribute and changes its class
*	to selected
*	@access private
*	@emits "Slide:selected"
*/
SlideIcon.prototype.clicked = function () {

	var self = this;

	var currentSlideIndex = $(self.options.slideClass).index(self.slideDOMElem);
	$(":focus").blur(); // force change event!

	$(self).trigger("Slide:selected", [currentSlideIndex]);

	$(this.options.slideClass + ".selected").removeClass("selected");
	$(self.slideDOMElem).addClass("selected");

	return false;
};

/**
*	Triggers a remove slide event with its id as an event attribute
*	@access private
*	@emits "Slide:deletePressed"
*/
SlideIcon.prototype.deleteButtonPressed = function () {

	var self = this;

	var currentSlideIndex = $(self.options.slideClass).index(self.slideDOMElem);
	$(self).trigger("Slide:deletePressed", [currentSlideIndex]);
};

/**
*	Appends the slide icon to a DOM node
*	@access public
*	@param {string} The DOM node id where the slide will be appended
*/
SlideIcon.prototype.appendTo = function (id) {

	this.slideDOMElem.appendTo(id);
	this.deleteDOMElem.appendTo(this.slideDOMElem);
};
"use strict";

/* global InfoPanel, SettingsPanel, Utils, $*/

/**
*	Constructs a SlideInfo panel object that stores the window where the slide is shown and the
*	right bar where the slide contents and story map settings are shown
*	@param {Object} options An object containing the following properties
*	@property {String} infoButtonId The DOM node id of the button used to show the info panel
*	@property {String} settingsButtonId The DOM node id of the button used to show the settings panel
*	@property {String} closeButtonId The DOM node id of the button used to close the right bar
*	@property {String} iFrameId The DOM node id of the iframe element where the slide is shown
*	@property {String} noURLId The DOM node id of the div shown when the slide doesn't have an URL
*	@property {String} menuContainerId The DOM node id of the div that contains the menu
*	@property {String} mapaFrame The DOM node id of the div that contains both the iframe and the
*	noURL div
*/
function SlideInfo(options) {

	var _defaultOptions = {

		infoButtonId: "#obrir_menu",
		settingsButtonId: "#settings_menu",
		closeButtonId: "#hide_menu",
		iFrameId: "#instamapsMap",
		noURLId: "#noURLLoaded",
		menuContainerId: "#mapviewer-floating-sidemenu",
		mapaFrame: "#mapaFrame"

	};

	this.options = $.extend(true, {}, _defaultOptions, options);
	this.isDirty = false;
	this.infoPanel = new InfoPanel();
	this.settingsPanel = new SettingsPanel();
	this.currentPanel = this.infoPanel;

	this.addEvents();
	this.reset();
}

/**
*	Adds the events the SlideInfo panel should respond to
*	@access private
*/
SlideInfo.prototype.addEvents = function () {
	var _this = this;

	var self = this;

	$(self.options.infoButtonId).on("click", function () {

		if ($(self.options.menuContainerId).hasClass("hideFloatingMenu")) {

			self.open();
		} else if (_this.infoPanel === _this.currentPanel) {

			self.close();
		}

		self.showInfoPanel();
	});

	$(self.options.settingsButtonId).on("click", function () {

		if ($(self.options.menuContainerId).hasClass("hideFloatingMenu")) {

			self.open();
		} else if (_this.settingsPanel === _this.currentPanel) {

			self.close();
		}

		self.showSettingsPanel();
	});

	$(self.options.closeButtonId).on("click", function () {

		self.close();
	});

	$(this.settingsPanel).on("Settings:overlappingChanged", function (event, isOverlapped) {

		if (isOverlapped) {

			$(_this.options.mapaFrame).removeClass("collapsed");
			$(_this.options.mapaFrame).addClass("expanded");
		} else {

			$(_this.options.mapaFrame).removeClass("expanded");
			$(_this.options.mapaFrame).addClass("collapsed");
		}
	});

	$(this.infoPanel).on("InfoPanel:loadURL", function (event, url) {

		if (url.trim() === "") {

			$(_this.options.noURLId).show();
			$(_this.options.iFrameId).hide();
		} else {

			$(self.options.iFrameId).attr("src", Utils.addProtocolIfNeeded(url));
			$(_this.options.noURLId).hide();
			$(_this.options.iFrameId).show();
		}
	});

	$(this.infoPanel).on("InfoPanel:clearURLPressed", function () {

		$(_this.options.noURLId).show();
		$(_this.options.iFrameId).hide();
		$(self.options.iFrameId).attr("src", "");
	});
};

/**
*	Resets the panel undoing the changes made and not saved
*	@access private
*/
SlideInfo.prototype.reset = function () {

	this.infoPanel.reset();
};

/**
*	Cleans the panel
*	@access private
*/
SlideInfo.prototype.clean = function () {

	this.infoPanel.clean();
};

/**
*	Closes the right bar
*	@access private
*/
SlideInfo.prototype.close = function () {

	$(this.options.menuContainerId).removeClass("showFloatingMenu");
	$(this.options.menuContainerId).addClass("hideFloatingMenu");
	$(this.options.closeButtonId).removeClass("reveal");
};

/**
*	Opens the right bar
*	@access private
*/
SlideInfo.prototype.open = function () {

	$(this.options.menuContainerId).removeClass("hideFloatingMenu");
	$(this.options.menuContainerId).addClass("showFloatingMenu");
	$(this.options.closeButtonId).addClass("reveal");
};

/**
*	Shows the info panel hiding the settings one
*	@access private
*/
SlideInfo.prototype.showInfoPanel = function () {

	this.infoPanel.show();
	this.settingsPanel.hide();
	this.currentPanel = this.infoPanel;
};

/**
*	Shows the settings panel hiding the info one
*	@access private
*/
SlideInfo.prototype.showSettingsPanel = function () {

	this.infoPanel.hide();
	this.settingsPanel.show();
	this.currentPanel = this.settingsPanel;
};

/**
*	Sets the slide data into the info panel
*	@param {String} url The slide url
*	@param {String} title The slide title
*	@param {String} description The slide description
*	@access public
*/
SlideInfo.prototype.setData = function (url, title, description) {

	this.infoPanel.setData(url, title, description);
};

/**
*	Gets the slide URL
*	@access public
*	@returns {String} The slide URL
*/
SlideInfo.prototype.getURL = function () {

	return this.infoPanel.getURL();
};

/**
*	Gets the slide title
*	@access public
*	@returns {String} The slide title
*/
SlideInfo.prototype.getTitol = function () {

	return this.infoPanel.getTitol();
};

/**
*	Gets the slide description
*	@access public
*	@returns {String} The slide description
*/
SlideInfo.prototype.getDescripcio = function () {

	return this.infoPanel.getDescripcio();
};

/**
*	Gets the overlapping mode
*	@access public
*	@returns {String} The name of the overlapping mode ("overlapped" or "nonOverlapped")
*/
SlideInfo.prototype.getOverlappingMode = function () {

	return this.settingsPanel.getOverlappingMode();
};

/**
*	Gets the animated setting
*	@access public
*	@returns {boolean} A boolean telling if the StoryMap is animated or not
*/
SlideInfo.prototype.isAnimated = function () {

	return this.settingsPanel.isAnimated();
};

/**
*	Gets the time between slides setting
*	@access public
*	@returns {Number} The number of seconds that the StoryMap waits before moving to the next slide
*/
SlideInfo.prototype.getTimeBetweenSlides = function () {

	return this.settingsPanel.getTimeBetweenSlides();
};

/**
*	Gets the should pause on hover setting
*	@access public
*	@returns {boolean} A boolean telling if the StoryMap should wait when the mouse is hovered on the
*	slide
*/
SlideInfo.prototype.shouldPauseOnHover = function () {

	return this.settingsPanel.shouldPauseOnHover();
};

/**
*	Gets the should start on load setting
*	@access public
*	@returns {boolean} A boolean telling if the StoryMap should start when its just loaded
*/
SlideInfo.prototype.shouldStartOnLoad = function () {

	return this.settingsPanel.shouldStartOnLoad();
};

/**
*	Gets the should anim on first slide setting
*	@access public
*	@returns {boolean} A boolean telling if the StoryMap should animate after the first slide
*	has been viewed
*/
SlideInfo.prototype.shouldAnimOnFirstSlide = function () {

	return this.settingsPanel.shouldAnimOnFirstSlide();
};

/**
*	Gets the should loop setting
*	@access public
*	@returns {boolean} A boolean telling if the StoryMap should return to the first slide
*	after the last one is viewed
*/
SlideInfo.prototype.shouldLoop = function () {

	return this.settingsPanel.shouldLoop();
};

/**
*	Sets the overlapping mode
*	@access public
*	@param {boolean} shouldOverlap A boolean telling if the right bar should be overlapped
*	or not
*/
SlideInfo.prototype.setOverlappingMode = function (shouldOverlap) {

	return this.settingsPanel.setOverlappingMode(shouldOverlap);
};

/**
*	Sets the animated setting
*	@access public
*	@param {boolean} shouldAnimate A boolean telling if the StoryMap should be animated
*	or not
*/
SlideInfo.prototype.setIsAnimated = function (shouldAnimate) {

	return this.settingsPanel.setIsAnimated(shouldAnimate);
};

/**
*	Sets the time between slides setting
*	@access public
*	@param {Number} time The number of seconds the StoryMap waits before moving to the next
*	slide
*/
SlideInfo.prototype.setTimeBetweenSlides = function (time) {

	return this.settingsPanel.setTimeBetweenSlides(time);
};

/**
*	Sets the should pause on hover setting
*	@access public
*	@param {boolean} shouldPause A boolean telling if the StoryMap should be paused
*	when the mouse is hovering the slide or not
*/
SlideInfo.prototype.setPauseOnHover = function (shouldPause) {

	return this.settingsPanel.setPauseOnHover(shouldPause);
};

/**
*	Sets the should start on load setting
*	@access public
*	@param {boolean} shouldStart A boolean telling if the StoryMap should start the
*	animation on load or not
*/
SlideInfo.prototype.setStartOnLoad = function (shouldStart) {

	return this.settingsPanel.setStartOnLoad(shouldStart);
};

/**
*	Sets the animate on first slide setting
*	@access public
*	@param {boolean} shouldStart A boolean telling if the StoryMap should start the animation
*	after the first slide is viewed or not
*/
SlideInfo.prototype.setAnimOnFirstSlide = function (shouldAnimate) {

	return this.settingsPanel.setAnimOnFirstSlide(shouldAnimate);
};

/**
*	Sets the loop setting
*	@access public
*	@param {boolean} shouldStart A boolean telling if the StoryMap should loop when the last
*	slide is reached or not
*/
SlideInfo.prototype.setLoop = function (shouldLoop) {

	return this.settingsPanel.setLoop(shouldLoop);
};
"use strict";

/* global _, $, SlideBar, SlideInfo, StoryMapServer, Dialog, Loader, window*/

/**
*	Constructs a StoryMap
*	@param {Object} options An object containing the following properties
*	@property {String} language The language identifier
*	@property {Number} maxSlides The maximum number of slides in the storymap
*	@property {Object} strings An object with the translations
*	@property {String} editorURL A string with the URL where the user should be pointed at to edit
*	the story map when it's published
*	@property {String} viewerURL A string with the URL where the user should be pointed at to view
*	the story map when it's published
*	@property {String} titleId The DOM node identifier where the story map title must be set
*/
function StoryMap(options) {

	var _defaultOptions = {

		language: "en",
		maxSlides: 12,
		strings: {
			en: {
				maxSlides: "Maximum number of slides reached",
				delete: "Delete \"<<name>>\" slide?",
				loading: "Loading StoryMap",
				toSeeAndShareText: "To see and share this storymap use this link:",
				toEditText: "If you want to keep working on it or change it some time use this link:",
				rememberText: "Remember this links as, for now, they can't be retrieved later",
				sendByEmailText: "If you want we can send it by email:",
				emailButtonText: "Send it!"
			},
			ca: {
				maxSlides: "Màxim número de slides assolit",
				delete: "Elimina la diapositiva \"<<name>>\"?",
				loading: "Carregant l'StoryMap",
				toSeeAndShareText: "Per veure i compartir aquest storymap empra l’enllaç:",
				toEditText: "Si vols seguir-hi treballant o fer canvis més endavant empra aquest altre enllaç:",
				rememberText: "Recorda desar aquests enllaços, ja que ara per ara no es podran recuperar quan tanquis aquesta finestra.",
				sendByEmailText: "Si vols els pots enviar per correu:",
				emailButtonText: "Envia'ls"
			},
			es: {
				maxSlides: "Has llegado al número máximo de slides",
				delete: "Elimina la diapositiva \"<<name>>\"?",
				loading: "Cargando el StoryMap",
				toSeeAndShareText: "Para ver y compartir este storymap usa el siguiente enlace:",
				toEditText: "Si quieres seguir trabajando o hacer cambios mas adelante usa ese enlace:",
				rememberText: "Recuerda guardar estos enlaces ya que por ahora no se pueden recuperar.",
				sendByEmailText: "Si quieres los puedes enviar por correo:",
				emailButtonText: "Envialos"
			}
		},
		editorURL: "http://betaserver2.icgc.cat/storymap/html/editor.html",
		viewerURL: "http://betaserver2.icgc.cat/storymap/html/visor.html",
		titleId: "#storyMapTitle",
		publishDialogTemplate: "#publish_map_template",
		sendEmailButtonId: "#sendEmailBtn"

	};

	this.options = $.extend(true, {}, _defaultOptions, options);

	this.isDirty = false;
	this.currentDeletionIndex = -1;
	this.currentSelectedIndex = -1;
	this.slides = [];
	this.idEditor = "";
	this.idStoryMap = "";
	this.slideBar = new SlideBar();
	this.slideInfoPanel = new SlideInfo();
	this.deleteDialog = new Dialog();
	this.maxSlidesDialog = new Dialog({ showCancelButton: false });
	this.maxSlidesDialog.setMessage(this.options.strings[this.options.language].maxSlides);
	this.publishDialog = new Dialog({ showCancelButton: false });
	this.server = new StoryMapServer();
	this.loader = new Loader();
	this.publishTemplate = $(this.options.publishDialogTemplate).html().trim();
	this.sendEmailButton = $(this.options.sendEmailButtonId);

	this.addEvents();
	this._addSlide();
}

/**
*	Adds the events the story map should respond to
*	@access private
*/
StoryMap.prototype.addEvents = function () {
	var _this = this;

	var self = this;

	$(self.slideBar).on("SlideBar:saveStorymapPressed", function () {

		self._updateCurrentSlideData();
		self.loader.setTitle("Guardant l'Storymap");
		self.loader.show();

		self.save().then(function () {

			self.loader.hide();
			self.publish();
		});
	});

	$(self.slideBar).on("SlideBar:slideSelected", function (event, id) {

		// Get the data from the info panel and add it to the current slide
		self._updateCurrentSlideData();
		self._slideSelected(id);
	});

	$(self.slideBar).on("SlideBar:addSlidePressed", function () {

		self._addSlide();
	});

	$(self.slideBar).on("SlideBar:deleteSlidePressed", function (event, id) {

		self.currentDeletionIndex = id;
		self._showDeleteDialog(id);
	});

	$(self.slideBar).on("SlideBar:slideMoved", function (event, startPos, endPos) {

		var tempSlide = _this.slides[startPos];
		_this.slides.splice(startPos, 1);
		_this.slides.splice(endPos, 0, tempSlide);

		if (_this.currentSelectedIndex === startPos) {

			_this.currentSelectedIndex = endPos;
		}
	});

	$(self.deleteDialog).on("Dialog:accept", function () {

		self._deleteSlide();
		self.currentDeletionIndex = -1;
	});

	$(self.deleteDialog).on("Dialog:cancel", function () {

		self.currentDeletionIndex = -1;
	});
};

/**
*	Creates a slide data object
*	@param {Number} id The slide identifier
*	@param {string} url The url the slide should open
*	@param {string} title The slide title
*	@param {string} description The slide description
*	@access private
*/
StoryMap.prototype.createSlideData = function (id, url, title, description) {

	var slideId = id === undefined ? -1 : id;
	var slideURL = url || "";
	var slideTitol = title || "";
	var slideDesc = description || "";

	var data = {
		id: slideId,
		url_mapa: slideURL,
		titol: slideTitol,
		descripcio: slideDesc
	};

	return data;
};

/**
*	Adds a slide to the story map if we haven't reached the maximum number
*	@access private
*/
StoryMap.prototype._addSlide = function () {

	var self = this;

	var n = self.slides.length;
	if (n === self.options.maxSlides) {

		self.maxSlidesDialog.show();
	} else {

		var slide = self.createSlideData(n);
		self.slides.push(slide);
		this.slideBar.addSlide();
		$(self).trigger("StoryMap:changed");
	}
};

/**
*	Selects an slide and loads its data into the info panel
*	@param {number} index The slide index
*	@access private
*/
StoryMap.prototype._slideSelected = function (index) {

	if (this.slides !== null) {

		this.currentSelectedIndex = index;
		var currentSlide = this.slides[index];
		this.slideInfoPanel.setData(currentSlide.url_mapa, currentSlide.titol, currentSlide.descripcio);
		this.slideInfoPanel.open();
	}
};

/**
*	Updates the slide data with the data found in the info panel
*	@access private
*/
StoryMap.prototype._updateCurrentSlideData = function () {

	if (this.slides !== null) {

		if (this.currentSelectedIndex !== -1) {

			var currentSlide = this.slides[this.currentSelectedIndex];

			currentSlide.url_mapa = this.slideInfoPanel.getURL();
			currentSlide.titol = this.slideInfoPanel.getTitol();
			currentSlide.descripcio = this.slideInfoPanel.getDescripcio();
			this.slideBar.setSlideTitle(currentSlide.titol);
			this.isDirty = true;
		}
	}
};

/**
*	Shows a delete confirmation modal with the slide title on it
*	@param {number} index The slide index
*	@access private
*/
StoryMap.prototype._showDeleteDialog = function (index) {

	var data = this.slides[index];
	var slideTitle = data.titol || "(untitled)";

	this.deleteDialog.setMessage(this.options.strings[this.options.language].delete.replace("<<name>>", slideTitle));
	this.deleteDialog.show();
};

/**
*	Pushes the story map to the server
*	@access public
*/
StoryMap.prototype.save = function () {
	var _this2 = this;

	var deferred = $.Deferred();
	var storymapData = {
		title: $(this.options.titleId).val(),
		overlappingMode: this.slideInfoPanel.getOverlappingMode(),
		animationOptions: {
			isAnimated: this.slideInfoPanel.isAnimated(),
			timeBetweenSlides: this.slideInfoPanel.getTimeBetweenSlides(),
			pauseOnHover: this.slideInfoPanel.shouldPauseOnHover(),
			startOnLoad: this.slideInfoPanel.shouldStartOnLoad(),
			animOnFirst: this.slideInfoPanel.shouldAnimOnFirstSlide(),
			loop: this.slideInfoPanel.shouldLoop()
		},
		slides: this.slides
	};

	if (this.idStoryMap !== "") {

		if (this.idEditor === "") {

			// Story map already exist, go into edit mode
			this.server.editMapSlides(this.idStoryMap).then(function (results) {

				this.idEditor = results.id_editor;

				this.server.updateMapSlides(this.idEditor, this.idStoryMap, JSON.stringify(storymapData)).then(function () {

					deferred.resolve();
				}, function () {

					deferred.reject();
				});
			}, function () {

				deferred.reject();
			});
		} else {

			this.server.updateMapSlides(this.idEditor, this.idStoryMap, JSON.stringify(storymapData)).then(function () {

				deferred.resolve();
			}, function () {

				deferred.reject();
			});
		}
	} else {

		// Story map doesn't exist, build a new one with the current information
		this.server.newMapSlides(JSON.stringify(storymapData)).then(function (results) {

			_this2.idStoryMap = results.id;
			_this2.idEditor = results.id_editor;
			deferred.resolve();
		}, function () {

			deferred.reject();
		});
	}

	return deferred.promise();
};

/**
*	Deletes the slide selected to delete removing its icon from the slide bar and its info from
*	the info panel
*	@access private
*/
StoryMap.prototype._deleteSlide = function () {

	var self = this;

	self.isDirty = true;
	self.slides.splice(this.currentDeletionIndex, 1);
	self.slideBar.removeSlide(this.currentDeletionIndex);
	self.slideInfoPanel.clean();
	this.currentSelectedIndex = -1;
};

/**
*	Loads a story map from the server and inits the editor components
*	@param {string} id A story map identifier
*	@access public
*/
StoryMap.prototype.load = function (id) {

	var self = this;

	self.idEditor = id;
	self.loader.setTitle(this.options.strings[this.options.language].loading);
	self.loader.show();

	self.server.editMapSlides(id).then(function (results) {

		self.currentSelectedIndex = -1;
		self.isDirty = false;
		self.idStoryMap = results.id;
		var data = JSON.parse(results.slides);
		self.slides = data.slides;
		self.slideBar.clear();
		self.slideBar.addSlides(self.slides);
		self.slideInfoPanel.setOverlappingMode(data.overlappingMode);
		self.slideInfoPanel.setIsAnimated(data.animationOptions.isAnimated);
		self.slideInfoPanel.setTimeBetweenSlides(data.animationOptions.timeBetweenSlides);
		self.slideInfoPanel.setPauseOnHover(data.animationOptions.pauseOnHover);
		self.slideInfoPanel.setStartOnLoad(data.animationOptions.startOnLoad);
		self.slideInfoPanel.setAnimOnFirstSlide(data.animationOptions.animOnFirst);
		self.slideInfoPanel.setLoop(data.animationOptions.loop);
		$(self.options.titleId).val(data.title);

		self.loader.hide();
	});
};

/**
*	Shows the publish dialog with the URLs to edit and to view the current storymap
*	@access public
*/
StoryMap.prototype.publish = function () {
	var _this3 = this;

	var self = this;

	var urlEditor = self.options.editorURL + "?id=" + self.idEditor;
	var urlVisor = self.options.viewerURL + "?id=" + self.idStoryMap;
	var currentLanguage = self.options.strings[self.options.language];
	var mailBody = currentLanguage.toSeeAndShareText + "%0D%0A\n\t\t" + urlVisor + "%0D%0A\n\t\t%0D%0A\n\t\t" + currentLanguage.toEditText + "%0D%0A\n\t\t%0D%0A\n\t\t" + urlEditor;

	var message = _.template(self.publishTemplate, {
		lang: self.options.strings[self.options.language],
		viewLink: urlVisor,
		editLink: urlEditor
	});

	self.publishDialog.setMessage(message);
	self.publishDialog.show();

	$(self.options.sendEmailButtonId).on("click", function () {

		window.open("mailto:?subject=Enlla\xE7os Storymap " + $(_this3.options.titleId).val() + ".&body=" + mailBody, "_self");
	});
};
"use strict";

/* global $*/

/**
*	Constructs a StoryMap server
*	@param {Object} options An object containing the following properties
*	@property {string} urlStoryMap The URL where the server lives on
*/
function StoryMapServer(options) {

	var _defaultOptions = {

		urlStoryMap: "http://betaserver2.icgc.cat/storymaps/"

	};

	this.options = $.extend(true, {}, _defaultOptions, options);
}

/**
*	Gets the slides from a story map in view mode
*	@param {String} idStoryMap The story map identifier
*	@returns {Promise} A promise resolving the server call
*/
StoryMapServer.prototype.getMapSlides = function (idStoryMap) {

	// Example: http://172.70.1.32/storymaps/768ddc60-66e2-11e7-af5e-09aff007230d
	return $.ajax({

		method: "GET",
		url: this.options.urlStoryMap + idStoryMap

	});
};

/**
*	Gets the slides from a story map in edit mode
*	@param {String} idStoryMap The story map identifier
*	@returns {Promise} A promise resolving the server call
*/
StoryMapServer.prototype.editMapSlides = function (idStoryMap) {

	// Example: http://172.70.1.32/storymaps/edit/76d21f00-48e0-4216-bb52-84a8a41cc6a2
	return $.ajax({

		method: "GET",
		url: this.options.urlStoryMap + "edit/" + idStoryMap

	});
};

/**
*	Pushes slides to the server creating a new story map
*	@param {String} jsonSlides A JSON-encoded string with the story map data
*	@returns {Promise} A promise resolving the server call
*/
StoryMapServer.prototype.newMapSlides = function (jsonSlides) {

	// http://172.70.1.32/storymaps/edit/
	return $.ajax({

		method: "POST",
		url: this.options.urlStoryMap + "edit/",
		dataType: "json",
		data: { id: 0, id_editor: 0, slides: jsonSlides }

	});
};

/**
*	Pushes slides to the server editing a story map
*	@param {String} idEditStoryMap The edit mode story map identifier
*	@param {String} idViewStoryMap The view mode story map identifier
*	@param {String} jsonSlides A JSON-encoded string with the story map data
*	@returns {Promise} A promise resolving the server call
*/
StoryMapServer.prototype.updateMapSlides = function (idEditStoryMap, idViewStoryMap, jsonSlides) {

	return $.ajax({

		method: "PUT",
		url: this.options.urlStoryMap + "edit/" + idEditStoryMap,
		dataType: "json",
		data: { id: idViewStoryMap, id_editor: idEditStoryMap, slides: jsonSlides }

	});
};

/**
*	Deletes a story map
*	@param {String} idEditStoryMap The edit mode story map identifier
*	@param {String} idViewStoryMap The view mode story map identifier
*	@returns {Promise} A promise resolving the server call
*/
StoryMapServer.prototype.deleteMapSlides = function (idEditStoryMap, idViewStoryMap) {

	return $.ajax({

		method: "DELETE",
		url: this.options.urlStoryMap + "edit/" + idEditStoryMap + "/" + idViewStoryMap,
		contentType: "application/json"

	});
};
"use strict";

/** 
*	Class that groups utility functions
*	@exports Utils
*/
var Utils = {

	/**
 *	Checks if the provided url is a correct-encoded URL
 *	@param {string} url The url to check
 *	@returns {boolean} A boolean telling if the url is valid
 *	@instance
 */
	isValidURL: function isValidURL(url) {

		var expression = /(?:https?:\/\/)?(?:[\w]+\.)([a-zA-Z\.]{2,6})([\/\w\.-]*)*\/?/gi;
		var regex = new RegExp(expression);

		return regex.test(url);
	},


	/**
 *	Checks if the provided text is a correct-encoded email
 *	@param {string} text The text to check
 *	@returns {boolean} A boolean telling if the text is a valid email
 *	@instance
 */
	isValidEmail: function isValidEmail(text) {

		var expression = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		var regex = new RegExp(expression);

		return regex.test(text);
	},


	/**
 *	Checks if the provided text is not empty
 *	@param {string} text The text to check
 *	@returns {boolean} A boolean telling if the text is emtpy
 *	@instance
 */
	isNotEmpty: function isNotEmpty(text) {

		return text.trim() !== "";
	},


	/**
 *	Generates a random letter
 *	@returns {string} A string containing the letter generated
 *	@instance
 */
	getRandomLetter: function getRandomLetter() {

		return String.fromCharCode(65 + Math.floor(Math.random() * 26));
	},


	/**
 *	Generates a random identifier
 *	@returns {string} A string containing the identifier
 *	@instance
 */
	getRandomId: function getRandomId() {

		return Utils.getRandomLetter() + Date.now();
	},


	/**
 *	Adds the protocol to an URL if needed
 *	@returns {string} A string with a url containing a protocol
 *	@instance
 */
	addProtocolIfNeeded: function addProtocolIfNeeded(url) {

		var newURL = url;
		var expression = /(?:https?:\/\/)/gi;
		var regex = new RegExp(expression);

		if (!regex.test(url)) {

			newURL = "http://" + newURL;
		}

		return newURL;
	}
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
